Necessidades de Software Médico
Conformidade Calma
A PROMESSA da computação calma, um conceito introduzido por Mark Weiser há mais de 20 anos, foi em grande parte realizada hoje. Por exemplo, como usuário final, espera-se que você interaja durante sua rotina diária com uma infinidade de serviços e aplicativos sofisticados sem estar ciente de sua implementação técnica. Tudo o que você precisa é de um smartphone e uma conexão à Internet sempre ativa.

No entanto, os provedores de aplicativos e desenvolvedores de software percebem a realidade da tecnologia calma de maneira diferente dos usuários finais. Eles precisam de uma compreensão profunda do hardware e software especializados usados para fornecer seus aplicativos. Além disso, o envolvimento de outras partes interessadas pode adicionar complexidade ao processo de desenvolvimento de software. Na indústria de dispositivos médicos, em particular, que está sujeita a requisitos abrangentes de conformidade, as autoridades regulatórias visam garantir que a tecnologia produzida pelos desenvolvedores seja adequada para o propósito e segura para os usuários finais. Além disso, há uma desconexão considerável entre o domínio médico, onde os dados empíricos são cruciais, e a engenharia de software, onde uma atitude baseada em evidências é menos comum.

Neste artigo, apresentamos a conformidade calma, onde as atividades de conformidade são realizadas de maneira calma, sem o incômodo comumente associado a elas. A conformidade calma - ou conformidade de baixa cerimônia, que também consideramos como nome - é o resultado final da aplicação de atividades ágeis e contínuas de desenvolvimento de software em um domínio regulamentado. As atividades regulatórias necessárias são alimentadas no processo de uma maneira que não leva ao tipo de integração do big-bang e, como nos aplicativos do usuário final, o software é usado para realizar tarefas tediosas, demoradas e propensas a erros humanos no processo.

Para tornar a conformidade calma concreta, usamos definições de software como dispositivo médico (SaMD) para observar como as metodologias ágeis de desenvolvimento podem ser aumentadas com atividades regulatórias exigidas pela Lei Federal de Alimentos, Medicamentos e Cosméticos (FD&C) e pelo Regulamento de Dispositivos Médicos (MDR) iminente. O ponto de vista que assumimos é o do desenvolvedor, com base nos padrões aplicáveis. Para simplificar, deixamos outros requisitos de conformidade possivelmente relacionados fora do escopo do artigo, com exceção da possível inspiração que podemos tirar deles.

O artigo é baseado em vários anos de experiência na engenharia de dispositivos médicos autônomos em indústrias, cobrindo tanto o desenvolvimento interno quanto os papéis consultivos.

Software como Dispositivo Médico

O desenvolvimento de software para dispositivos médicos tem necessidades exclusivas. Seus processos de design, desenvolvimento e fabricação são regulamentados. Portanto, deve haver mecanismos adequados de controle para garantir a segurança, confiabilidade e capacidade do produto final atender aos requisitos do usuário. Esses mecanismos de controle originam-se dos requisitos regulatórios, documentos orientadores correspondentes, padrões internacionais e legislação nacional. No entanto, sua existência abundante é uma das razões pelas quais o software médico é frequentemente considerado um domínio complexo.

As metodologias orientadas por planos foram a maneira preferida de desenvolver produtos em indústrias regulamentadas. Sua afinidade cultural com a linguagem e o formato usados pelos padrões mencionados anteriormente os tornou a escolha natural. No entanto, os ciclos longos de feedback que caracterizam essas metodologias são ainda mais longos nos processos de alta cerimônia exigidos para cumprir as regulamentações.

A aplicabilidade e rigor dos requisitos regulatórios do dispositivo médico são baseados no nível de risco do produto. Não é suficiente ter apenas um produto final compatível, pois o quadro regulatório afeta as operações de toda a organização de fabricação. O design e desenvolvimento do dispositivo são feitos dentro de um processo formal que faz parte de um sistema robusto de gerenciamento da qualidade.

O processo controlado de desenvolvimento do produto visa produzir software de alta qualidade ao mesmo tempo em que produz evidências objetivas para demonstrar conformidade após a aprovação regulatória. O objetivo das evidências é mostrar que o desenvolvimento foi realizado de acordo com procedimentos pré-definidos e, ao mesmo tempo, provar que o software atende às suas especificações predeterminadas e atende às suas necessidades e requisitos do usuário pretendidos. Na prática, a evidência inclui resultados de testes, registros de revisão e registros de rastreabilidade gerados automaticamente com um trilho de auditoria. É essencial que a rastreabilidade completa para todos os elementos do design e desenvolvimento possa ser demonstrada.

O objetivo geral dos controles de design e desenvolvimento é gerenciar o nível de risco do produto final. Portanto, além do sistema de gerenciamento da qualidade, é necessário um sistema de gerenciamento de risco compatível com as regulamentações. No caso do software médico, as atividades de gerenciamento de risco são implementadas de acordo com os requisitos da ISO 14971, onde o foco está nos riscos relacionados à segurança. Estes podem ser divididos em riscos que surgem do uso pretendido do software médico, geralmente afetando diretamente o paciente (por exemplo, fornecer uma overdose de medicamento) e aqueles relacionados à seleção da tecnologia (por exemplo, falha do sistema operacional). Ambos os tipos são tratados como riscos relacionados ao produto durante e após o desenvolvimento. O processo inclui identificação, mitigação e verificação das ações mitigadoras implementadas. Além disso, o processo avalia a aceitabilidade do risco residual quando as ações mitigadoras foram implementadas.

Como o processo de desenvolvimento do produto do dispositivo médico é multidisciplinar em sua natureza, o processo de gerenciamento de risco também requer uma equipe multidisciplinar para ser realmente eficaz, abrangendo riscos clínicos e técnicos. Os riscos clínicos, ou seja, os riscos que podem comprometer a condição clínica ou a segurança do paciente, na maioria das vezes já foram identificados antes do processo de implementação. No entanto, na fase de implementação, os desenvolvedores são responsáveis por identificar e documentar os riscos técnicos associados ao design, que são então conectados aos riscos clínicos. Simplificar a conexão entre riscos clínicos e técnicos requer trabalho em equipe entre desenvolvedores de software, especialistas clínicos, proprietários do produto, especialistas em segurança e oficiais de conformidade e isso forma o núcleo da conformidade calma.

Pontos Problemáticos Atuais
Além das complicações habituais relacionadas a projetos de software, os desenvolvedores no domínio médico enfrentam certos desafios únicos. Os principais pontos problemáticos podem estar associados a regulamentações, documentos orientadores e um conjunto selecionado de padrões que estabelecem um conjunto inter-relacionado de requisitos que devem ser entrelaçados no processo de desenvolvimento. A seguir, listamos os mais graves e fornecemos uma breve justificativa para sua emergência.
Atividades Relacionadas à Conformidade Frustram os Desenvolvedores
Os benefícios dos métodos ágeis e engenharia contínua também se aplicam ao software médico. No entanto, usá-los no desenvolvimento de software médico introduz as mesmas preocupações que qualquer tecnologia - como lidar com obrigações legais e regulatórias em um novo contexto. Isso culmina no cenário da engenharia contínua de software, onde novas versões podem ser lançadas várias vezes por dia, mas isso não é beneficiado por restrições regulatórias.

Em vez disso, os desenvolvedores são impedidos de implantar coisas até que todos os processos relacionados à conformidade e regulamentação estejam concluídos, formando uma contradição à declaração do manifesto ágil "Software funcionando sobre documentação abrangente" e interrompendo o fluxo natural da equipe de desenvolvimento. Não é incomum descobrir que os desenvolvedores sentem que as atividades regulatórias não melhoram a qualidade do software e são, portanto, uma perda de tempo. Quando os controles regulatórios são vistos como um impedimento ao desenvolvimento efetivo do produto, os desenvolvedores podem começar a procurar maneiras de contornar os requisitos do sistema de qualidade.
Por exemplo, práticas comuns de desenvolvimento como refatoração podem ser difíceis de entender do ponto de vista da conformidade por causa do potencial para mudar as coisas a tal ponto que atividades anteriores concluídas anteriormente sejam invalidadas e tenham que ser realizadas novamente. Para complicar ainda mais as coisas, profissionais regulatórios frequentemente praticaram em ambientes onde os dispositivos médicos sempre incluem hardware e geralmente seguem um modelo linear de desenvolvimento. Portanto, eles podem não ter as habilidades e experiência para operar em um ambiente ágil de desenvolvimento de software, particularmente ao lidar com dispositivos médicos que consistem apenas em software, são altamente distribuídos, contêm um grande número de componentes open source desenvolvidos por terceiros ou dependem sistemas externos mantidos por provedores públicos na nuvem.
Desconexão Entre Regulamentos e Atividades Desenvolvidas
Os textos legislativos legalmente vinculativos e os padrões internacionais descrevem os resultados esperados, mas não como alcançá-los. Portanto, é necessário conhecimento prático para definir as etapas necessárias para alcançar os objetivos. Para complicar ainda mais as coisas, muitos dos projetos disponíveis para gerenciamento de projetos e gerenciamento do ciclo de vida da aplicação (ALM) para desenvolvimento de software exigem que os desenvolvedores invistam tempo e esforço para mantê-los sincronizados em vez confiar na automação.

Os desenvolvedores são profissionais em desenvolvimento de software e não regulamentação. Eles muitas vezes recorrem à engenharia excessiva ou adicionam esforço extra às atividades relacionadas à conformidade para jogar pelo seguro - mesmo que essas atividades não contribuam verdadeiramente para melhorar a qualidade. Portanto, os desenvolvedores podem ver a conformidade como um mal necessário que deve ser considerado mas tem pouca relevância prática. Consequentemente, as atividades relacionadas à conformidade muitas vezes são deixadas de lado durante a criação do software e ressurgem apenas quando a tarefa de desenvolvimento é concluída. Esta ressurreição muitas vezes precisa do suporte pessoal dedicado à conformidade.
Regulamentos São Escritos em uma Linguagem Desconhecida
Regulamentos, documentos orientadores e padrões da indústria foram escritos com cuidado considerável e terminologia precisamente definida para comunicar o propósito do texto sem ambiguidade. No entanto, a linguagem regulatória desses documentos governamentais pode não ser familiar para uma organização. O quadro regulatório, que consiste em vários documentos diferentes, é uma totalidade complexa que deve ser bem compreendida para criar uma implementação regulatória eficaz e compatível. Além disso, como os requisitos concretos nos documentos regulatórios geralmente são escritos vagamente, eles podem estar sujeitos a interpretação implícita significando que os profissionais podem entender até mesmo a terminologia chave em diferentes maneiras.

Infelizmente, os processos regulatórios são projetados para verificar interpretações apenas posteriormente quando já foi investido esforço no desenvolvimento. Uma maneira prática de superar problemas relacionados é educar o pessoal sobre as regulamentações e aplicar as lições no desenvolvimento do software. Além disso, endossando terminologia comum compartilhada com a prática da linguagem ubíqua do Design Orientado ao Domínio pode oferecer ajuda.

Nos processos de qualidade e atividades regulatórias em particular, tradicionalmente têm sido implementados usando ferramentas de ALM que possuem uma filosofia diferente daquelas que gerenciam o ciclo de vida do desenvolvimento de software. Tipicamente, a proficiência em usar uma ferramenta não se traduz em domínio da outra. Enquanto as ALMs são eficazes em registrar atividades centradas em documentos de alta cerimônia, como decisões do conselho de gerenciamento de mudanças, os sistemas de controle de versão e as ferramentas associadas se destacam na automação de tarefas, servindo como pontos de integração para várias ferramentas DevOps. Como tal, tentativas de alinhar os dois ecossistemas de ferramentas são frágeis e exigem esforço significativo de manutenção.

Devido a esses pontos problemáticos, muitas das ações regulatórias no desenvolvimento de software correm o risco de serem consideradas uma ilusão de controle. Seu efeito é amplamente um complemento às atividades diárias de desenvolvimento com as quais os desenvolvedores estão familiarizados e, portanto, atividades relacionadas à conformidade são acionadas apenas quando fundamentalmente inevitáveis. Para melhorar isso, confiamos na conformidade tranquila, onde as atividades de conformidade fazem parte das rotinas diárias e não exigem cerimônias elaboradas e avançadas.

A proposta de conformidade tranquila para o desenvolvimento de software visa aliviar os pontos problemáticos descritos. Em geral, a abordagem que propomos é a integração completa das atividades de conformidade com as tarefas diárias relacionadas ao software, seguindo a tendência do pensamento enxuto, ciclos rápidos de feedback e suporte extensivo de ferramentas em todas as tarefas de desenvolvimento.

O núcleo da conformidade deve determinar cuidadosamente o objetivo pretendido do software médico e sua transformação em necessidades do usuário e requisitos do sistema. Em geral, é útil minimizar a pegada dos requisitos que precisam ser rastreados em vez de considerar o superset de fatores possivelmente relacionados - este último tende a gerar consideravelmente mais tarefas para os desenvolvedores. Para alguns produtos de software médico, por exemplo, as arquiteturas devem ser segregadas em vários módulos onde alguns deles não têm um propósito médico. Os módulos do dispositivo não médico não estão sujeitos a regulamentações de dispositivos médicos e, como resultado, podem ser abordados com processos de desenvolvimento mais leves. Entender o equilíbrio entre requisitos regulamentados e outros é fundamental para processos regulatórios simplificados.

Ao trabalhar com software regulatório, a conformidade é responsabilidade de todos. Assim, todos os membros da equipe devem estar preparados para trabalhar em atividades relacionadas à conformidade - até o ponto em que, sempre que o código é enviado para um repositório de código-fonte, atividades relacionadas à conformidade são invocadas. Em essência, isso significa que, ao enviar o código, há um procedimento relacionado a verificações de conformidade, conforme proposto anteriormente. Em grande parte, a automação pode ajudar a realizar as verificações de conformidade. No entanto, o desenvolvedor deve estar ciente delas e suas consequências pretendidas, que devem ser documentadas. Além disso, muitas vezes é uma boa prática coletar a aprovação da mudança dos membros da equipe mais qualificados quando ocorre uma mudança, pois isso pode ajudar em casos problemáticos.

Uma das principais peças no desenvolvimento de software é a arquitetura subjacente. A arquitetura do software bem documentada serve como uma ferramenta de comunicação que facilita a interação entre a equipe de desenvolvimento e outras partes interessadas, bem como um mapa que descreve como as necessidades do usuário são implementadas em componentes de software. Além disso, a IEC 62304 exige que o fabricante crie arquitetura de software e documentação mais detalhada do design para determinados itens de decomposição arquitetônica.

Devido à natureza evolutiva e iterativa do processo de desenvolvimento, a arquitetura tem que reconciliar e capturar decisões de design intencionais e emergentes resultantes de mudanças individuais feitas por desenvolvedores. As decisões podem ser capturadas usando um arquivo markdown estruturado de acordo com MADR (https://adr.github.io/madr/). Além disso, o gerenciamento da arquitetura deve ser leve e acessível. Por exemplo, o modelo C4 (https://c4model.com) para visualizar arquitetura de software (https://c4model.com) é serializado usando uma linguagem específica do domínio legível por humanos, mas também por máquinas (https://github.com/structurizr/dsl), uma abordagem que oferece uma baixa barreira de entrada para que as atividades arquitetônicas não sejam limitadas a indivíduos específicos na equipe. Para atender aos requisitos regulatórios, as ferramentas devem suportar versionamento para que a evolução da arquitetura possa ser documentada efetivamente e rastreada nos requisitos que acionaram a mudança respectiva.

A documentação regulatória é a "soma de todos os documentos" criados durante o desenvolvimento do produto. Hoje, uma percepção comum é que esses documentos e sua rastreabilidade formam o núcleo do trabalho, em detrimento do desenvolvimento técnico. No entanto, no verdadeiro computação tranquila, as ferramentas se tornam a documentação. Por exemplo, o Git pode atuar como um livro-razão, onde as alterações estão vinculadas aos hashes de confirmação em vez de ferramentas arquivais, como o SharePoint. Em geral, formatos ricos em texto como Markdown ou AsciiDoc, combinados com linguagens específicas do domínio para capturar diagramas técnicos como PlantUML (https://plantuml.com) ou Mermaid (https://mermaid-js.github.io/mermaid), fornecem as propriedades certas que permitem que a documentação seja mantida e versionada no Git, mas também em pipelines de construção que geram conteúdo amigável ao usuário final para consumo online (por exemplo, um site) ou offline (por exemplo, um documento PDF).

CompliancePal (https://compliancepal.eu) é um produto comercialmente disponível que visa simplificar as atividades de conformidade com o desenvolvimento de software. Até o momento, existem dois clientes piloto que forneceram suporte para validar externamente o sistema. As experiências apresentadas neste artigo decorrem principalmente dos clientes piloto e das discussões com outros fabricantes de software médico.

O sistema CompliancePal leva em consideração os elementos da conformidade tranquila introduzidos na seção "Em direção à conformidade tranquila", auxiliando na rotina diária de uma equipe ágil de desenvolvimento que pratica a metodologia Scrum. Entre o grupo ágil, enfatizamos quatro papéis relevantes necessários em uma equipe Scrum orientada para a medicina - o proprietário do produto, desenvolvedor de software, arquiteto e oficial de conformidade. Como em qualquer equipe Scrum, eles são conjuntamente responsáveis por resolver problemas regulatórios emergentes. Além disso, o proprietário do produto garante que o sistema apropriado de gerenciamento da qualidade esteja sendo usado. Uma citação dos usuários do CompliancePal: "Gostamos de ferramentas opinativas de conformidade porque não precisamos criar uma solução nós mesmos", sugere que isso é bem apreciado pelos desenvolvedores.

O código produzido pela equipe é gerenciado usando um repositório Git hospedado no GitHub (https://github.com/). As verificações de conformidade são realizadas pelo nosso serviço, que estende os fluxos de trabalho padrão do GitHub usando o método de integração Apps (https://developer.github.com/apps/). Os resultados da verificação são expostos usando a funcionalidade Statuses do GitHub associada a cada confirmação. Possíveis problemas de conformidade são trazidos à atenção da equipe por meio de uma sala de bate-papo dedicada hospedada no Slack (https://slack.com/).

A documentação relacionada à arquitetura que descreve como os componentes de software implementam requisitos do produto, sua hierarquia e como eles interagem entre si é gerenciada em um repositório no GitHub da mesma forma que o restante do código produzido pela equipe.

Os oficiais de conformidade podem reagir aos problemas detectados que requerem sua atenção por meio do canal de comunicação da equipe. Seguindo o link, o oficial pode lidar com o problema usando a interface do usuário do CompliancePal, um aplicativo da web dedicado às atividades relacionadas à conformidade, mas vinculado ao GitHub na parte traseira para automatizar o máximo possível. Dessa forma, o oficial de conformidade não precisa estar familiarizado com o serviço GitHub usado pelos desenvolvedores.

Os fluxos de trabalho da conformidade podem ser configurados para incluir também a funcionalidade fornecida por terceiros, como Dependabot (https://dependabot.com) ou WhiteSource (https://www.whitesourcesoftware.com) para gerenciar dependências open source e suas vulnerabilidades ou Fossa (https://fossa.com) para gerenciar e aplicar políticas de licença para dependências open source (consulte "Gerenciando Dependências De Software De Terceiros Com CompliancePal").

Ao usar diretamente Git e a interface fornecida pelo GitHub, CompliancePal pode aproveitar as capacidades existentes do ecossistema descrito na Figura 1, mas também contribuir para a criação de novas ferramentas. Para resumir, a Tabela 1 apresenta um mapeamento dos principais pontos problemáticos para recursos do CompliancePal.

Para alcançar verdadeira conformidade tranquila, as atividades relacionadas devem estar incorporadas ao tecido da abordagem de desenvolvimento da empresa ao ponto em que muito poucas pessoas na organização estão pensando em conformidade além dos profissionais designados para assuntos regulatórios. O restante do pessoal, por outro lado, passa seus dias resolvendo problemas, entregando produtos e gerenciando processos e a conformidade é incorporada em todos eles.

Como demonstrado, os passos para alcançar a visão estão relacionados às ferramentas e práticas cotidianas. As atividades regulatórias integradas nas ferramentas usadas pelos desenvolvedores são o primeiro passo nesse processo. Isso se aplica particularmente às solicitações pull request (PRs), que são a maneira de introduzir alterações no software, mas também podem ser usadas como meio para gerenciar conformidade com relação às alterações no código. Além disso, ferramentas para apresentar artefatos armazenados em um sistema de controle de versão ou produzidos por pipelines contínuos / entrega contínua facilitarão a participação de todos os membros da equipe - incluindo oficiais de conformidade - em atividades de desenvolvimento, conforme defendido em métodos ágeis.

Embora as ferramentas possam integrar ações relacionadas à conformidade no desenvolvimento contínuo, diferenças culturais podem impedir a conformidade tranquila, mesmo se as ferramentas estiverem no lugar. Em nossa experiência, empresas com desenvolvimento médico estabelecido estão procurando um processo e aplicativo separados para considerar questões regulatórias, mantendo assim os oficiais regulatórios distantes da equipe de desenvolvimento. Isso está alinhado com suas estruturas organizacionais estabelecidas e é comum em grandes empresas.

Por outro lado, empresas familiarizadas com o desenvolvimento contínuo de software confiam em equipes auto-organizáveis ​​mas são novas em aspectos regulatórios encontraram o CompliancePal adequado para seus casos de uso. Aqui, os oficiais regulatórios se alinham às atividades de desenvolvimento e não vice-versa. Para alcançar isso requer repensar a distribuição tradicional das tarefas usando ferramentas relativamente simples mas bem consideradas. Até agora, com a implementação apresentada aqui houve um número mínimo de solicitações de alteração emergindo dos usuários do pipeline. Tomamos isso como evidência da viabilidade do conjunto de recursos para conformidade tranquila.

Finalmente, é importante observar que alguns elementos da conformidade tranquila não podem ser alcançados apenas com ferramentas de desenvolvimento mas exigem uma mudança no pensamento e comportamento. Um exemplo é constituído pela análise e modelagem ameaças à segurança amplamente utilizadas durante o desenvolvimento da aplicação em muitos campos, incluindo o domínio médico.13 Nesse contexto,ferramentas como OWASP Threat Dragon (https://owasp.org/www-project-threat-dragon/) facilitam a identificação das Facilitar a identificação de ameaças de segurança de forma precoce e mitigar os riscos é uma tarefa importante para garantir a proteção de sistemas e dados. Uma das metodologias utilizadas para esse fim é a STRIDE, que consiste em analisar as ameaças sob seis perspectivas: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service e Elevation of Privilege.

Apesar de ser uma abordagem eficiente, os profissionais da área de dispositivos médicos ainda não adotaram modelos de ameaças unificados, preferindo utilizar planilhas para realizar a análise de riscos. Isso pode comprometer a eficácia da proteção desses sistemas, uma vez que as ameaças podem não ser identificadas de forma adequada.

Para garantir a segurança dos dispositivos médicos é importante que os profissionais da área adotem metodologias eficientes, como a STRIDE, e utilizem modelos de ameaças unificados. Dessa forma, será possível identificar as ameaças de forma mais precisa e mitigar os riscos de forma mais eficiente.